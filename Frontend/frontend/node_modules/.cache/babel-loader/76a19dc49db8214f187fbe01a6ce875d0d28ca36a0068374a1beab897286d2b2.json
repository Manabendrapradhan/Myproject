{"ast":null,"code":"import axios from 'axios';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { LoadScript, GoogleMap, StandaloneSearchBox, Marker } from '@react-google-maps/api';\nimport { useNavigate } from 'react-router-dom';\n// import { Store } from '../Store';\n// import Button from 'react-bootstrap/Button';\n// import { toast } from 'react-toastify';\n\n// const defaultLocation = { lat: 45.516, lng: -73.56 };\n// const libs = ['places'];\n\n// export default function MapScreen() {\n//   const { state, dispatch: ctxDispatch } = useContext(Store);\n//   const { userInfo } = state;\n//   const navigate = useNavigate();\n//   const [googleApiKey, setGoogleApiKey] = useState('');\n//   const [center, setCenter] = useState(defaultLocation);\n//   const [location, setLocation] = useState(center);\n\n//   const mapRef = useRef(null);\n//   const placeRef = useRef(null);\n//   const markerRef = useRef(null);\n\n//   const getUserCurrentLocation = () => {\n//     if (!navigator.geolocation) {\n//       alert('Geolocation os not supported by this browser');\n//     } else {\n//       navigator.geolocation.getCurrentPosition((position) => {\n//         setCenter({\n//           lat: position.coords.latitude,\n//           lng: position.coords.longitude,\n//         });\n//         setLocation({\n//           lat: position.coords.latitude,\n//           lng: position.coords.longitude,\n//         });\n//       });\n//     }\n//   };\n//   useEffect(() => {\n//     const fetch = async () => {\n//       const { data } = await axios('/api/keys/google', {\n//         headers: { Authorization: `BEARER ${userInfo.token}` },\n//       });\n//       setGoogleApiKey(data.key);\n//       getUserCurrentLocation();\n//     };\n\n//     fetch();\n//     ctxDispatch({\n//       type: 'SET_FULLBOX_ON',\n//     });\n//   }, [ctxDispatch]);\n\n//   const onLoad = (map) => {\n//     mapRef.current = map;\n//   };\n//   const onIdle = () => {\n//     setLocation({\n//       lat: mapRef.current.center.lat(),\n//       lng: mapRef.current.center.lng(),\n//     });\n//   };\n\n//   const onLoadPlaces = (place) => {\n//     placeRef.current = place;\n//   };\n//   const onPlacesChanged = () => {\n//     const place = placeRef.current.getPlaces()[0].geometry.location;\n//     setCenter({ lat: place.lat(), lng: place.lng() });\n//     setLocation({ lat: place.lat(), lng: place.lng() });\n//   };\n\n//   const onMarkerLoad = (marker) => {\n//     markerRef.current = marker;\n//   };\n\n//   const onConfirm = () => {\n//     const places = placeRef.current.getPlaces() || [{}];\n//     ctxDispatch({\n//       type: 'SAVE_SHIPPING_ADDRESS_MAP_LOCATION',\n//       payload: {\n//         lat: location.lat,\n//         lng: location.lng,\n//         address: places[0].formatted_address,\n//         name: places[0].name,\n//         vicinity: places[0].vicinity,\n//         googleAddressId: places[0].id,\n//       },\n//     });\n//     toast.success('location selected successfully.');\n//     navigate('/shipping');\n//   };\n//   return (\n//     <div className=\"full-box\">\n//       <LoadScript libraries={libs} googleMapsApiKey={googleApiKey}>\n//         <GoogleMap\n//           id=\"smaple-map\"\n//           mapContainerStyle={{ height: '100%', width: '100%' }}\n//           center={center}\n//           zoom={15}\n//           onLoad={onLoad}\n//           onIdle={onIdle}\n//         >\n//           <StandaloneSearchBox\n//             onLoad={onLoadPlaces}\n//             onPlacesChanged={onPlacesChanged}\n//           >\n//             <div className=\"map-input-box\">\n//               <input type=\"text\" placeholder=\"Enter your address\"></input>\n//               <Button type=\"button\" onClick={onConfirm}>\n//                 Confirm\n//               </Button>\n//             </div>\n//           </StandaloneSearchBox>\n//           <Marker position={location} onLoad={onMarkerLoad}></Marker>\n//         </GoogleMap>\n//       </LoadScript>\n//     </div>\n//   );\n// }","map":{"version":3,"names":["axios","React","useContext","useEffect","useRef","useState","LoadScript","GoogleMap","StandaloneSearchBox","Marker","useNavigate"],"sources":["D:/Manabendra'/Myproject/Frontend/frontend/src/screens/MapScreen.js"],"sourcesContent":["import axios from 'axios';\r\nimport React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport {\r\n  LoadScript,\r\n  GoogleMap,\r\n  StandaloneSearchBox,\r\n  Marker,\r\n} from '@react-google-maps/api';\r\nimport { useNavigate } from 'react-router-dom';\r\n// import { Store } from '../Store';\r\n// import Button from 'react-bootstrap/Button';\r\n// import { toast } from 'react-toastify';\r\n\r\n// const defaultLocation = { lat: 45.516, lng: -73.56 };\r\n// const libs = ['places'];\r\n\r\n// export default function MapScreen() {\r\n//   const { state, dispatch: ctxDispatch } = useContext(Store);\r\n//   const { userInfo } = state;\r\n//   const navigate = useNavigate();\r\n//   const [googleApiKey, setGoogleApiKey] = useState('');\r\n//   const [center, setCenter] = useState(defaultLocation);\r\n//   const [location, setLocation] = useState(center);\r\n\r\n//   const mapRef = useRef(null);\r\n//   const placeRef = useRef(null);\r\n//   const markerRef = useRef(null);\r\n\r\n//   const getUserCurrentLocation = () => {\r\n//     if (!navigator.geolocation) {\r\n//       alert('Geolocation os not supported by this browser');\r\n//     } else {\r\n//       navigator.geolocation.getCurrentPosition((position) => {\r\n//         setCenter({\r\n//           lat: position.coords.latitude,\r\n//           lng: position.coords.longitude,\r\n//         });\r\n//         setLocation({\r\n//           lat: position.coords.latitude,\r\n//           lng: position.coords.longitude,\r\n//         });\r\n//       });\r\n//     }\r\n//   };\r\n//   useEffect(() => {\r\n//     const fetch = async () => {\r\n//       const { data } = await axios('/api/keys/google', {\r\n//         headers: { Authorization: `BEARER ${userInfo.token}` },\r\n//       });\r\n//       setGoogleApiKey(data.key);\r\n//       getUserCurrentLocation();\r\n//     };\r\n\r\n//     fetch();\r\n//     ctxDispatch({\r\n//       type: 'SET_FULLBOX_ON',\r\n//     });\r\n//   }, [ctxDispatch]);\r\n\r\n//   const onLoad = (map) => {\r\n//     mapRef.current = map;\r\n//   };\r\n//   const onIdle = () => {\r\n//     setLocation({\r\n//       lat: mapRef.current.center.lat(),\r\n//       lng: mapRef.current.center.lng(),\r\n//     });\r\n//   };\r\n\r\n//   const onLoadPlaces = (place) => {\r\n//     placeRef.current = place;\r\n//   };\r\n//   const onPlacesChanged = () => {\r\n//     const place = placeRef.current.getPlaces()[0].geometry.location;\r\n//     setCenter({ lat: place.lat(), lng: place.lng() });\r\n//     setLocation({ lat: place.lat(), lng: place.lng() });\r\n//   };\r\n\r\n//   const onMarkerLoad = (marker) => {\r\n//     markerRef.current = marker;\r\n//   };\r\n\r\n//   const onConfirm = () => {\r\n//     const places = placeRef.current.getPlaces() || [{}];\r\n//     ctxDispatch({\r\n//       type: 'SAVE_SHIPPING_ADDRESS_MAP_LOCATION',\r\n//       payload: {\r\n//         lat: location.lat,\r\n//         lng: location.lng,\r\n//         address: places[0].formatted_address,\r\n//         name: places[0].name,\r\n//         vicinity: places[0].vicinity,\r\n//         googleAddressId: places[0].id,\r\n//       },\r\n//     });\r\n//     toast.success('location selected successfully.');\r\n//     navigate('/shipping');\r\n//   };\r\n//   return (\r\n//     <div className=\"full-box\">\r\n//       <LoadScript libraries={libs} googleMapsApiKey={googleApiKey}>\r\n//         <GoogleMap\r\n//           id=\"smaple-map\"\r\n//           mapContainerStyle={{ height: '100%', width: '100%' }}\r\n//           center={center}\r\n//           zoom={15}\r\n//           onLoad={onLoad}\r\n//           onIdle={onIdle}\r\n//         >\r\n//           <StandaloneSearchBox\r\n//             onLoad={onLoadPlaces}\r\n//             onPlacesChanged={onPlacesChanged}\r\n//           >\r\n//             <div className=\"map-input-box\">\r\n//               <input type=\"text\" placeholder=\"Enter your address\"></input>\r\n//               <Button type=\"button\" onClick={onConfirm}>\r\n//                 Confirm\r\n//               </Button>\r\n//             </div>\r\n//           </StandaloneSearchBox>\r\n//           <Marker position={location} onLoad={onMarkerLoad}></Marker>\r\n//         </GoogleMap>\r\n//       </LoadScript>\r\n//     </div>\r\n//   );\r\n// }\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACtE,SACEC,UAAU,EACVC,SAAS,EACTC,mBAAmB,EACnBC,MAAM,QACD,wBAAwB;AAC/B,SAASC,WAAW,QAAQ,kBAAk},"metadata":{},"sourceType":"module","externalDependencies":[]}